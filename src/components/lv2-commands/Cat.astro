---
// Cat: display content entry
import { getEntry } from 'astro:content';
import Shell from '../lv1-shell/Shell.astro';
import Pager from '../lv0-atoms/Pager.astro';
import { Navigation } from '../../lib/navigation';
import { routeToUrl, parseSlug } from '../../lib/routes';

export interface Props {
  slug: string; // "2024-01-15/001-astro-setup" or "2024-01-15"
}

const { slug } = Astro.props;

const entry = await getEntry('daily', slug);

if (!entry) {
  throw new Error(`Content not found for slug: ${slug}`);
}

const { data } = entry;
const { Content } = await entry.render();

const navigation = await Navigation.getContext(slug);

const route = parseSlug(slug);
const displayPath = routeToUrl(route);

const metaFields = Object.entries(data).filter(
  ([key]) => key !== 'title' && key !== 'description'
);
---

<Shell command={`cat ${displayPath}`}>
  <div class="file-content">
    <div class="pager-nav">
      <h1>{data.title}</h1>
      <Pager {...navigation} />
    </div>
    <div class="meta">
      {
        metaFields.map(([key, value]) =>
          key === 'tags' && Array.isArray(value) ? (
            value.map((tag: string) => (
              <a href={routeToUrl({ type: 'tag', tag })} class="tag">
                #{tag}
              </a>
            ))
          ) : (
            <span class="meta-item">
              {key}: {value}
            </span>
          )
        )
      }
    </div>
    <Content />
  </div>
</Shell>

<style lang="scss">
  .file-content {
    margin-left: 0;
    line-height: var(--line-height-normal);
  }

  .meta {
    font-size: var(--text-small);
    margin: var(--space-sm) 0 var(--space-md) 0;
    line-height: var(--line-height-normal);
  }

  .tag {
    margin-right: var(--space-sm);
  }

  .meta-item {
    margin-right: var(--space-md);
  }

  .file-content :global(h1) {
    font-size: var(--text-normal);
    font-weight: var(--text-weight-bold);
    margin: 0;
    font-family: var(--font-mono);
    display: flex;
    align-items: baseline;
  }

  /* Pager navigation styles for slot usage */
  .file-content :global(.pager-nav) {
    display: flex;
    justify-content: space-between;
    align-items: baseline;
    margin: 0;
    position: relative;
  }

  .file-content :global(.pager-nav h1) {
    font-size: var(--text-normal);
    font-weight: var(--text-weight-bold);
    margin: 0;
    font-family: var(--font-mono);
  }

  /* Content styling for markdown */
  .file-content :global(h2) {
    margin-top: var(--space-md);
    margin-bottom: var(--space-sm);
    font-weight: var(--text-weight-bold);
    display: flex;
    align-items: baseline;
  }

  .file-content :global(h3) {
    margin-top: var(--space-sm);
    margin-bottom: var(--space-xs);
    font-weight: var(--text-weight-bold);
    display: flex;
    align-items: baseline;
  }

  .file-content :global(p) {
    margin: var(--space-sm) 0;
  }

  .file-content :global(ul),
  .file-content :global(ol) {
    margin: var(--space-sm) 0;
    padding-left: var(--space-xl);
    list-style-position: outside;
  }

  .file-content :global(li) {
    margin-bottom: var(--space-xs);
  }
</style>

<script>
  import { ContentAnchors } from '../../lib/ui';
  ContentAnchors.init('.file-content');
</script>
