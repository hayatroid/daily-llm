---
/**
 * Tree component - displays content hierarchy based on path
 * Uses Content Collections internally for data access
 */
import { getCollection } from 'astro:content';
import {
  isConversationEntry,
  extractDate,
  createEntryUrl,
  sortConversationsByFilename,
} from '../lib/entry-utils';
import Prompt from './Prompt.astro';

export interface Props {
  path: string; // "/" | "/2024-01-15/" | "/tags" | "/tags/react"
}

interface TreeItem {
  level: number;
  href: string;
  text: string;
  meta?: string;
}

const { path } = Astro.props;

// Load all entries
const allEntries = await getCollection('daily');

let treeItems: TreeItem[] = [];

// Determine view type from path
if (path === '/') {
  // Home: Date-based conversation listing
  const entriesByDate = new Map<string, typeof allEntries>();

  allEntries.forEach((entry) => {
    const date = extractDate(entry);
    if (!entriesByDate.has(date)) {
      entriesByDate.set(date, []);
    }
    entriesByDate.get(date).push(entry);
  });

  const sortedDates = Array.from(entriesByDate.keys()).sort().reverse();

  treeItems.push({
    level: 0,
    href: '/',
    text: 'Home/',
  });

  sortedDates.forEach((date) => {
    const dateEntries = entriesByDate.get(date);
    const conversations = dateEntries.filter(isConversationEntry);

    treeItems.push({
      level: 1,
      href: `/${date}/`,
      text: `${date}/`,
      meta: conversations.length > 0 ? `${conversations.length} conversations` : undefined,
    });

    sortConversationsByFilename(conversations).forEach((entry) => {
      treeItems.push({
        level: 2,
        href: createEntryUrl(entry),
        text: entry.data.title,
      });
    });
  });
} else if (path === '/tags') {
  // Tags index: List all tags with counts
  const conversationEntries = allEntries.filter(isConversationEntry);
  const tagCounts = new Map<string, number>();

  conversationEntries.forEach((entry) => {
    if (entry.data.tags && Array.isArray(entry.data.tags)) {
      entry.data.tags.forEach((tag) => {
        tagCounts.set(tag, (tagCounts.get(tag) || 0) + 1);
      });
    }
  });

  const sortedTags = Array.from(tagCounts.keys()).sort((a, b) =>
    a.toLowerCase().localeCompare(b.toLowerCase())
  );

  treeItems.push({
    level: 0,
    href: '/tags/',
    text: 'tags/',
  });

  sortedTags.forEach((tagName) => {
    const count = tagCounts.get(tagName);
    treeItems.push({
      level: 1,
      href: `/tags/${encodeURIComponent(tagName)}/`,
      text: `#${tagName}`,
      meta: `${count} conversation${count !== 1 ? 's' : ''}`,
    });
  });
} else if (path.startsWith('/tags/')) {
  // Specific tag: Show conversations with this tag grouped by date
  const tag = path.replace('/tags/', '').replace(/\/$/, '');
  const conversationEntries = allEntries.filter(isConversationEntry);
  const taggedConversations = conversationEntries.filter(
    (entry) =>
      entry.data.tags &&
      Array.isArray(entry.data.tags) &&
      entry.data.tags.includes(tag)
  );

  const dateGroups = new Map<string, typeof allEntries>();
  taggedConversations.forEach((entry) => {
    const date = extractDate(entry);
    if (!dateGroups.has(date)) {
      dateGroups.set(date, []);
    }
    dateGroups.get(date).push(entry);
  });

  const sortedDates = Array.from(dateGroups.keys()).sort(
    (a, b) => new Date(b).getTime() - new Date(a).getTime()
  );

  treeItems.push({
    level: 0,
    href: `/tags/${encodeURIComponent(tag)}/`,
    text: `#${tag}/`,
    meta: `${taggedConversations.length} conversations`,
  });

  sortedDates.forEach((date) => {
    const conversations = dateGroups.get(date);

    treeItems.push({
      level: 1,
      href: `/${date}/`,
      text: `${date}/`,
      meta: `${conversations.length} conversations`,
    });

    sortConversationsByFilename(conversations).forEach((entry) => {
      treeItems.push({
        level: 2,
        href: createEntryUrl(entry),
        text: entry.data.title,
      });
    });
  });
} else {
  // Specific date: Show conversations in this date
  const targetDate = path.replace(/^\/|\/$/g, '');
  const dateEntries = allEntries.filter(
    (entry) => extractDate(entry) === targetDate
  );
  const conversations = dateEntries.filter(isConversationEntry);

  treeItems.push({
    level: 0,
    href: `/${targetDate}/`,
    text: `${targetDate}/`,
  });

  sortConversationsByFilename(conversations).forEach((entry) => {
    treeItems.push({
      level: 1,
      href: createEntryUrl(entry),
      text: entry.data.title,
    });
  });
}
---

<div class="session">
  <div class="command-block">
    <Prompt command="tree" />
  </div>
  <div class="tree">
    {treeItems.map((item) => (
      <div class="tree-item" data-level={item.level}>
        <a href={item.href} class="tree-link">{item.text}</a>
        {item.meta && <span class="tree-meta">{item.meta}</span>}
      </div>
    ))}
  </div>
</div>
