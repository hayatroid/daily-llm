---
import Prompt from './Prompt.astro';

export interface Props {
  filename: string;
  frontmatter: any;
  Content: any;
}

const { 
  filename, 
  frontmatter, 
  Content 
} = Astro.props;

// Skip title field as it's rendered as h1
const metaFields = Object.entries(frontmatter).filter(([key]) => key !== 'title');
---

<div class="cat-file-section">
  <div class="command-block">
    <Prompt command={`cat ${filename}`} />
  </div>
  <div class="file-content">
    <slot name="title">
      <h1>{frontmatter.title}</h1>
    </slot>
    <div class="meta">
      {metaFields.length > 0 && (
        <p class="meta-line">
          {metaFields
            .map(([key, value]) => {
              let displayValue = value;
              
              if (key === 'tags' && Array.isArray(value)) {
                displayValue = value.map((tag: string) => `#${tag}`).join(' ');
              } else if (key === 'outcome' && typeof value === 'string') {
                displayValue = value;
              } else if (key === 'outcomes' && Array.isArray(value)) {
                displayValue = value.join(' | ');
              }
              
              return displayValue;
            })
            .filter(value => value && value !== '')
            .join(' | ')}
        </p>
      )}
    </div>
    <Content />
  </div>
</div>

<style>
  .file-content {
    margin-left: 0;
  }

  .meta {
    color: var(--term-secondary);
    font-size: var(--text-small);
    margin: var(--space-sm) 0 var(--space-md) 0;
    line-height: var(--line-height-normal);
  }

  .meta-line {
    margin: 0;
  }

  .file-content h1 {
    font-size: var(--text-normal);
    font-weight: var(--text-weight-bold);
    margin: 0;
    font-family: var(--font-mono);
  }

  /* Title navigation styles for slot usage */
  .file-content :global(.title-nav) {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin: 0;
    position: relative;
  }

  .file-content :global(.title-nav h1) {
    font-size: var(--text-normal);
    font-weight: var(--text-weight-bold);
    margin: 0;
    font-family: var(--font-mono);
    text-align: center;
    flex: 1;
  }

  .file-content :global(.nav-arrow) {
    color: var(--term-primary);
    text-decoration: none;
    font-size: var(--text-normal);
    line-height: var(--line-height-tight);
    transition: opacity var(--duration-fast) ease;
    user-select: none;
    display: block;
    padding: var(--space-xs);
  }

  .file-content :global(.nav-arrow.disabled) {
    color: var(--term-secondary);
    cursor: default;
    pointer-events: none;
  }

  .file-content :global(.nav-arrow:hover) {
    opacity: var(--opacity-hover);
  }

  .file-content {
    color: var(--term-secondary);
    line-height: var(--line-height-normal);
  }

  /* Content styling for markdown - CLI heading structure */
  .file-content :global(h2) {
    margin-top: var(--space-md);
    margin-bottom: var(--space-sm);
    font-weight: var(--text-weight-bold);
  }

  .file-content :global(h2::before) {
    content: "## ";
    color: var(--term-secondary);
    margin-right: calc(var(--char-offset) * var(--char-multiplier));
  }

  .file-content :global(h3) {
    margin-top: var(--space-sm);
    margin-bottom: var(--space-xs);
    font-weight: var(--text-weight-bold);
  }

  .file-content :global(h3::before) {
    content: "### ";
    color: var(--term-secondary);
    margin-right: calc(var(--char-offset) * var(--char-multiplier));
  }

  .file-content :global(p) {
    margin: var(--space-sm) 0;
  }

  .file-content :global(ul),
  .file-content :global(ol) {
    margin: var(--space-sm) 0;
    padding-left: var(--space-xl);
    list-style-position: outside;
  }

  .file-content :global(li) {
    margin-bottom: var(--space-xs);
  }

  /* Anchor-wrapped headings - preserve block display */
  .file-content :global(a) {
    display: block;
    text-decoration: none;
  }
  
  .file-content :global(a h1),
  .file-content :global(a h2),
  .file-content :global(a h3) {
    margin: inherit;
    color: inherit;
  }
</style>

<script>
  import { processHeadingSlugs } from '../utils/slugGenerator.js';

  // Wait for DOM to be ready
  document.addEventListener('DOMContentLoaded', () => {
    // Get all headings in the file content
    const headings = document.querySelectorAll('.file-content h1, .file-content h2, .file-content h3');
    
    if (headings.length === 0) return;
    
    // Generate unique slugs for all headings
    const slugMap = processHeadingSlugs(headings);
    
    // Apply anchor functionality to each heading
    headings.forEach(heading => {
      const slug = slugMap.get(heading);
      
      // Generate absolute URL for anchor
      const protocol = window.location.protocol;
      const host = window.location.host;
      const pathname = window.location.pathname;
      const cleanPath = pathname.endsWith('/') ? pathname.slice(0, -1) : pathname;
      const absoluteUrl = `${protocol}//${host}${cleanPath}#${slug}`;
      
      // Wrap entire heading with anchor tag (including ::before decorations)
      const link = document.createElement('a');
      link.href = absoluteUrl;
      link.id = slug;
      link.addEventListener('click', (e) => {
        e.preventDefault();
        window.history.pushState(null, null, absoluteUrl);
        link.scrollIntoView({ 
          behavior: 'smooth',
          block: 'start'
        });
      });
      
      // Move heading inside the link
      const parent = heading.parentNode;
      parent.insertBefore(link, heading);
      link.appendChild(heading);
      
      // Remove ID from heading (now on link)
      heading.removeAttribute('id');
    });
    
    // Handle direct anchor links on page load
    if (window.location.hash) {
      const targetId = window.location.hash.substring(1);
      const targetHeading = document.getElementById(targetId);
      
      if (targetHeading) {
        setTimeout(() => {
          targetHeading.scrollIntoView({ 
            behavior: 'smooth',
            block: 'start'
          });
        }, 100);
      }
    }
  });
</script>