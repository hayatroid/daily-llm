---
import Prompt from './Prompt.astro';
import { VirtualFS } from '../lib/filesystem';

export interface Props {
  path: string;
}

const { path } = Astro.props;

// Get all content using Astro.glob
const allContent = await Astro.glob('../../content/**/*.md');

// Create filesystem instance
const fs = new VirtualFS(allContent);

// Read the file content
const content = fs.read(path);

if (!content) {
  throw new Error(`File not found: ${path}`);
}

const { metadata, Component } = content;

// Skip title and description fields (title is rendered as h1, description is internal metadata)
const metaFields = Object.entries(metadata).filter(([key]) => key !== 'title' && key !== 'description');

// Extract filename from path for display
const filename = path.split('/').pop() || path;
---

<div class="cat-file-section">
  <div class="command-block">
    <Prompt command={`cat ${filename}`} />
  </div>
  <div class="file-content">
    <slot name="title">
      <h1>{metadata.title}</h1>
    </slot>
    <div class="meta">
      {metaFields.length > 0 && (
        <p class="meta-line">
          {metaFields.map(([key, value], index) => (
            <span key={index}>
              {key === 'tags' && Array.isArray(value) ? (
                <span class="tags-container">
                  {value.map((tag: string, tagIndex) => (
                    <span key={tagIndex}>
                      <a href={`/tags/${encodeURIComponent(tag)}`} class="tag-link">#{tag}</a>
                      {tagIndex < value.length - 1 && ' '}
                    </span>
                  ))}
                </span>
              ) : (
                value
              )}
              {index < metaFields.length - 1 && ' | '}
            </span>
          ))}
        </p>
      )}
    </div>
    {Component && <Component />}
  </div>
</div>

<style>
  .file-content {
    margin-left: 0;
  }

  .meta {
    font-size: var(--text-small);
    margin: var(--space-sm) 0 var(--space-md) 0;
    line-height: var(--line-height-normal);
  }

  .meta-line {
    margin: 0;
  }


  .file-content :global(h1) {
    font-size: var(--text-normal);
    font-weight: var(--text-weight-bold);
    margin: 0;
    font-family: var(--font-mono);
    display: flex;
    align-items: baseline;
  }

  /* Title navigation styles for slot usage */
  .file-content :global(.title-nav) {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin: 0;
    position: relative;
  }

  .file-content :global(.title-nav h1) {
    font-size: var(--text-normal);
    font-weight: var(--text-weight-bold);
    margin: 0;
    font-family: var(--font-mono);
    flex: 1;
    display: flex;
    align-items: baseline;
    justify-content: center;
  }

  .file-content :global(.nav-arrow) {
    font-size: var(--text-normal);
    line-height: var(--line-height-tight);
    transition: opacity var(--duration-fast) ease;
    user-select: none;
    display: block;
    padding: var(--space-xs);
  }

  .file-content :global(.nav-arrow.disabled) {
    visibility: hidden;
  }


  .file-content {
    line-height: var(--line-height-normal);
  }

  /* Content styling for markdown - CLI heading structure */
  .file-content :global(h2) {
    margin-top: var(--space-md);
    margin-bottom: var(--space-sm);
    font-weight: var(--text-weight-bold);
    display: flex;
    align-items: baseline;
  }

  .file-content :global(h3) {
    margin-top: var(--space-sm);
    margin-bottom: var(--space-xs);
    font-weight: var(--text-weight-bold);
    display: flex;
    align-items: baseline;
  }


  .file-content :global(p) {
    margin: var(--space-sm) 0;
  }

  .file-content :global(ul),
  .file-content :global(ol) {
    margin: var(--space-sm) 0;
    padding-left: var(--space-xl);
    list-style-position: outside;
  }

  .file-content :global(li) {
    margin-bottom: var(--space-xs);
  }

</style>

<script>
  import { processHeadingSlugs } from '../utils/slugGenerator.js';

  // Wait for DOM to be ready
  document.addEventListener('DOMContentLoaded', () => {
    // Get all headings in the file content
    const headings = document.querySelectorAll('.file-content h1, .file-content h2, .file-content h3');
    
    if (headings.length === 0) return;
    
    // Generate unique slugs for all headings
    const slugMap = processHeadingSlugs(headings);
    
    // Apply anchor functionality to each heading
    headings.forEach(heading => {
      const slug = slugMap.get(heading);
      
      // Generate absolute URL for anchor
      const protocol = window.location.protocol;
      const host = window.location.host;
      const pathname = window.location.pathname;
      const cleanPath = pathname.endsWith('/') ? pathname.slice(0, -1) : pathname;
      const absoluteUrl = `${protocol}//${host}${cleanPath}#${slug}`;
      
      // Get heading text content
      const headingText = heading.textContent;
      
      // Determine heading marker based on tag name
      const markers = {
        'H1': '# ',
        'H2': '## ', 
        'H3': '### ',
        'H4': '#### ',
        'H5': '##### ',
        'H6': '###### '
      };
      const marker = markers[heading.tagName] || '';
      
      // Create new structure: <h2><span class="heading-marker">## </span><a>text</a></h2>
      const markerSpan = document.createElement('span');
      markerSpan.className = 'heading-marker';
      markerSpan.textContent = marker;
      
      const link = document.createElement('a');
      link.href = absoluteUrl;
      link.id = slug;
      link.textContent = headingText;
      link.addEventListener('click', (e) => {
        e.preventDefault();
        window.history.pushState(null, null, absoluteUrl);
        heading.scrollIntoView({ 
          behavior: 'smooth',
          block: 'start'
        });
      });
      
      // Replace heading content with marker + link
      heading.innerHTML = '';
      heading.appendChild(markerSpan);
      heading.appendChild(link);
    });
    
    // Handle direct anchor links on page load
    if (window.location.hash) {
      const targetId = window.location.hash.substring(1);
      const targetHeading = document.getElementById(targetId);
      
      if (targetHeading) {
        setTimeout(() => {
          targetHeading.scrollIntoView({ 
            behavior: 'smooth',
            block: 'start'
          });
        }, 100);
      }
    }
  });
</script>