---
/**
 * Cat component - displays single content entry based on path
 * Uses Content Collections internally for data access
 */
import { getEntry } from 'astro:content';
import Prompt from './Prompt.astro';
import Pager from './Pager.astro';
import { getNavigationForPath } from '../lib/navigation';

export interface Props {
  path: string; // "/2024-01-15/001-astro-setup" or "/2024-01-15/"
}

const { path } = Astro.props;

// Convert path to slug for Content Collections
// "/2024-01-15/001-astro-setup" → "2024-01-15/001-astro-setup"
// "/2024-01-15/" → "2024-01-15"
function pathToSlug(path: string): string {
  const cleanPath = path.replace(/^\/|\/$/g, '');
  return cleanPath || 'index';
}

const slug = pathToSlug(path);
const entry = await getEntry('daily', slug);

if (!entry) {
  throw new Error(`Content not found for path: ${path} (slug: ${slug})`);
}

const { data } = entry;
const { Content } = await entry.render();

// Get navigation automatically based on directory structure
const navigation = await getNavigationForPath(path);

// Filter frontmatter for meta display (exclude title and description)
const metaFields = Object.entries(data).filter(([key]) => key !== 'title' && key !== 'description');
---

<div class="session">
  <Prompt command={`cat ${path}`} />
  <div class="file-content">
    <div class="pager-nav">
      <h1>{data.title}</h1>
      <Pager {...navigation} />
    </div>
    <div class="meta">
      {metaFields.map(([key, value]) => (
        key === 'tags' && Array.isArray(value) ? (
          value.map((tag: string) => (
            <a href={`/tags/${encodeURIComponent(tag)}/`} class="tag">#{tag}</a>
          ))
        ) : (
          <span class="meta-item">{key}: {value}</span>
        )
      ))}
    </div>
    <Content />
  </div>
</div>

<style>
  .file-content {
    margin-left: 0;
  }

  .meta {
    font-size: var(--text-small);
    margin: var(--space-sm) 0 var(--space-md) 0;
    line-height: var(--line-height-normal);
  }

  .tag {
    margin-right: var(--space-sm);
  }

  .meta-item {
    margin-right: var(--space-md);
  }

  .file-content :global(h1) {
    font-size: var(--text-normal);
    font-weight: var(--text-weight-bold);
    margin: 0;
    font-family: var(--font-mono);
    display: flex;
    align-items: baseline;
  }

  /* Pager navigation styles for slot usage */
  .file-content :global(.pager-nav) {
    display: flex;
    justify-content: space-between;
    align-items: baseline;
    margin: 0;
    position: relative;
  }

  .file-content :global(.pager-nav h1) {
    font-size: var(--text-normal);
    font-weight: var(--text-weight-bold);
    margin: 0;
    font-family: var(--font-mono);
  }

  .file-content :global(.pager-controls) {
    display: flex;
    gap: var(--space-sm);
    align-items: baseline;
  }


  .file-content {
    line-height: var(--line-height-normal);
  }

  /* Content styling for markdown - CLI heading structure */
  .file-content :global(h2) {
    margin-top: var(--space-md);
    margin-bottom: var(--space-sm);
    font-weight: var(--text-weight-bold);
    display: flex;
    align-items: baseline;
  }

  .file-content :global(h3) {
    margin-top: var(--space-sm);
    margin-bottom: var(--space-xs);
    font-weight: var(--text-weight-bold);
    display: flex;
    align-items: baseline;
  }

  .file-content :global(p) {
    margin: var(--space-sm) 0;
  }

  .file-content :global(ul),
  .file-content :global(ol) {
    margin: var(--space-sm) 0;
    padding-left: var(--space-xl);
    list-style-position: outside;
  }

  .file-content :global(li) {
    margin-bottom: var(--space-xs);
  }
</style>

<script>
  import slugify from 'slugify';

  // Wait for DOM to be ready
  document.addEventListener('DOMContentLoaded', () => {
    // Get all headings in the file content
    const headings = document.querySelectorAll('.file-content h1, .file-content h2, .file-content h3');
    
    if (headings.length === 0) return;
    
    // Generate unique slugs for all headings
    const usedSlugs = new Set();
    const slugMap = new Map();
    
    headings.forEach(heading => {
      const text = heading.textContent || '';
      let baseSlug = slugify(text, { lower: true, strict: true }) || 'heading';
      
      // Ensure uniqueness
      let slug = baseSlug;
      let counter = 1;
      while (usedSlugs.has(slug)) {
        slug = `${baseSlug}-${counter}`;
        counter++;
      }
      
      slugMap.set(heading, slug);
      usedSlugs.add(slug);
    });
    
    // Apply anchor functionality to each heading
    headings.forEach(heading => {
      const slug = slugMap.get(heading);
      
      // Generate absolute URL for anchor
      const protocol = window.location.protocol;
      const host = window.location.host;
      const pathname = window.location.pathname;
      const cleanPath = pathname.endsWith('/') ? pathname.slice(0, -1) : pathname;
      const absoluteUrl = `${protocol}//${host}${cleanPath}#${slug}`;
      
      // Get heading text content
      const headingText = heading.textContent;
      
      // Determine heading marker based on tag name
      const markers = {
        'H1': '# ',
        'H2': '## ', 
        'H3': '### ',
        'H4': '#### ',
        'H5': '##### ',
        'H6': '###### '
      };
      const marker = markers[heading.tagName] || '';
      
      // Create new structure: <h2><span class="heading-marker">## </span><a>text</a></h2>
      const markerSpan = document.createElement('span');
      markerSpan.className = 'heading-marker';
      markerSpan.textContent = marker;
      
      const link = document.createElement('a');
      link.href = absoluteUrl;
      link.id = slug || '';
      link.textContent = headingText || '';
      link.addEventListener('click', (e) => {
        e.preventDefault();
        window.history.pushState(null, '', absoluteUrl);
        heading.scrollIntoView({ 
          behavior: 'smooth',
          block: 'start'
        });
      });
      
      // Replace heading content with marker + link
      heading.innerHTML = '';
      heading.appendChild(markerSpan);
      heading.appendChild(link);
    });
    
    // Handle direct anchor links on page load
    if (window.location.hash) {
      const targetId = window.location.hash.substring(1);
      const targetHeading = document.getElementById(targetId);
      
      if (targetHeading) {
        setTimeout(() => {
          targetHeading.scrollIntoView({ 
            behavior: 'smooth',
            block: 'start'
          });
        }, 100);
      }
    }
  });
</script>